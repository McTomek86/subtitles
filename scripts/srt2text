#!/usr/bin/perl -w

###
### Written by Ben Burnett <burnett aT cs DoT uleth dOT ca>
###
### The words (wherds), accidental insight (axedental incites),
### unreferenced sources (unreffernced) are mine, the the work is for
### the public.
###
### Licensed (Licencsed) under GPLv3 or any later version.
###

use strict;
use warnings;
use Switch qw(Perl6);
use Lingua::Stem qw(stem);

# Just one file at a time.
if ($#ARGV < 0) {
  die "usage: $0 filename.srt [skip-N-subs]\n";
}

# We should be receiving one file
my $chatter = $ARGV[0];
my $skip    = $#ARGV > 0 ? $ARGV[1] : 0;

##
# We're building a quick'n-dirty state-machine.  Three states, and
# we're away: first we are just looking for the sequence number; once
# we have found it, we stash the times the subtitle should appear on
# the screen with it; finally, we read all the text until we see an
# empty line, which tells us to start the search over again.
##
use constant {
  SEARCHING => 'Sequence',
  FOUND     => 'Timecode',
  SUBTITLE  => 'Subtitle'
};

my $state = SEARCHING;
my $i     = $skip;
my @deque;
my $subtitle;

sub clean {
  my ($subtitle) = @_;
  # If there is any HTML, remove it
  $subtitle =~ s/<[^>]*>/ /g;
  # Remove any non-word character (there likely is a better way do do this)
  $subtitle =~ y/\?\!\@\#\$\%\^\&\*\(\)\{\}\[\]\<\>\,\.\;\:\/\"\-\_\=\+/ /;
  # Remove the leading and trailing spaces
  $subtitle =~ s/^\ *//g;
  $subtitle =~ s/\ *$//g;
  # Compress the spaces to just one
  $subtitle =~ s/\ +/ /g;
  # Casefolding
  $subtitle =~ y/A-Z/a-z/;
  #my @words = split(/ /, $subtitle);
  #for my $i (0 .. $#words) {
  #  print "$words[$i], $i\n";
  #}
  return $subtitle;
}

sub qpush {
  my ($subtitle) = @_;
  push @deque, "$subtitle";
}

sub qpop {
  # The deque's size will be -1 when it is empty, so we check for a
  # request to skip no lines.
  if ($#deque > $skip || 0 == $skip) {
    if (my $subtitle = shift @deque) {
      print "$subtitle\n";
    }
  }
}

sub process {
  qpush(clean(@_));
  qpop;
}

open (INPUT, "<$chatter");
while (<INPUT>) {
  chomp;
  given ($state) {
    when (SEARCHING) {
      ##
      # Looking for the sequence number, which starts the subtitle
      # entry.
      ##
      if (/^([0-9]+)$/) {
	$state = FOUND;
      }
    }
    when (FOUND) {
      ##
      # We now have a sequence number, so we *should* be looking at
      # the times that the subtitle should appear and disappear on the
      # screen.  We expect the following format:
      #
      #   ^00:01:03,163 --> 00:01:04,425$
      #
      # Where '^' and '$' are the start of the start and the end of
      # the line, respectively.
      ##
      tr/,/./;
      if (/^([^ ]*) --\> ([^ ]*)$/) {
	$subtitle = "";
	$state    = SUBTITLE;
      }
    }
    when (SUBTITLE) {
      ##
      # What remains are the lines of the subtitle itself.  We just
      # iteratate over them until we see a blank line, which signals
      # the end of the subtitle.
      ##
      if (/^$/) {
	if ($i > 0) {
	  --$i;
	} else {
	  process($subtitle);
	  $subtitle = "";
	}
	$state = SEARCHING;
      } elsif (/(.*)/) {
	$subtitle .= "$1 ";
      }
    }
  }
}

##
# Sometimes, there is no empty line after the last subtitle entry.  In
# this case, we just echo the last one we were looking at.
##
process($subtitle);
